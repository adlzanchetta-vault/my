{"version":3,"file":"component---src-pages-cv-js-f683e4de36037aeca42a.js","mappings":"4NASA,MAAMA,EAAoBC,IACxB,MAAM,EAAEC,EAAC,KAAEC,IAASC,EAAAA,EAAAA,kBAEdC,EAAa,MAASJ,EAAMI,cAElC,IAAKF,EAAKG,OAAUD,EAAa,UAAa,OAAQ,iCAEtD,MAAME,EAAW,GACjBA,EAASC,KAAK,0BAAKN,EAAKG,EAAa,YAErC,IAAII,EAAW,EACf,KAAON,EAAKG,OAAUD,EAAa,IAAII,EAAQ,WAAW,CACxD,MAAMC,EAAeL,EAAa,IAAII,EAElCN,EAAKG,OAAUI,EAAS,WAC1BH,EAASC,KAAK,0BAAKN,EAAKQ,EAAS,YAI/BP,EAAKG,OAAUI,EAAS,UAC1BH,EAASC,KAAK,yBAAG,0BAAKN,EAAKQ,EAAS,YAIlCP,EAAKG,OAAUI,EAAS,iBAC1BH,EAASC,KAAK,yBAAIN,EAAKQ,EAAS,kBAI9BP,EAAKG,OAAUI,EAAS,cAC1BH,EAASC,KAAK,qBAAGG,UAAU,QAAST,EAAKQ,EAAS,eAGpDD,GAAY,CACd,CAEA,OAAQF,CAAQ,EAIZK,EAAuB,IAAkB,IAAjB,UAACC,GAAU,EAGvC,MAAMC,EAAcD,EAAUE,MAAM,WAEpC,OAAgC,IAAvBD,EAAYE,OACZ,gCAAGH,EAAU,KACb,gCACGC,EAAY,GACb,8BAASA,EAAY,IACpBA,EAAY,GAAG,IACd,EAITG,EAAuB,IAAY,IAAX,IAACC,GAAI,EACjC,OAAKA,EAGH,gCACE,4BAAM,UACN,qBAAGC,KAAI,mBAAqBD,EAAOE,OAAO,SAASC,IAAI,cAAcH,GAAQ,KAL7D,IAMf,EAIDI,EAAoB,CAACC,EAAaC,IAChCD,GAAeA,EAAYV,UAK/B,qBAAGF,UAAU,OAAOc,IAAKD,GACvB,gBAACZ,EAAoB,CAACC,UAAWU,EAAYV,YAC7C,gBAACI,EAAoB,CAACC,IAAKK,EAAYL,OANjC,KAWNQ,EAAwB,IAAqB,IAApB,aAACC,GAAa,EAC3C,MAAM,EAAEzB,EAAC,KAAEC,IAASC,EAAAA,EAAAA,kBAEdwB,EAAW,uBAGjB,OAAMD,GAAgBA,EAAaX,QAAUb,EAAKG,OAAOsB,GAIlD,gCACH,0BAAK1B,EAAE0B,IACPD,EAAaE,IAAIP,IALX,IAMP,EAIU,SAASQ,EAAG,GAAS,IAAT,KAACC,GAAK,EAE/B,MAAM,EAAE7B,IAAME,EAAAA,EAAAA,kBAEd,OACE,gBAAC,UAAM,CAAC4B,MAAO9B,EAAE,OACf,gBAACF,EAAgB,CAACK,cAAc,eAChC,gBAACL,EAAgB,CAACK,cAAc,cAChC,gBAACqB,EAAqB,CAACC,aAAcI,EAAKR,YAAYU,QAI5D,C","sources":["webpack://gatsby-starter-hello-world/./src/pages/cv.js"],"sourcesContent":["import React from \"react\";\nimport { graphql } from \"gatsby\";\nimport { useTranslation } from \"gatsby-plugin-react-i18next\";\n\nimport Layout from \"./common/Layout\";\n\nimport \"../styles/cv.css\";\n\n\nconst CVsectionGeneric = (props) => {\n  const { t, i18n } = useTranslation();\n\n  const sectionPrefix = `cv_${props.sectionPrefix}`;\n\n  if (!i18n.exists(`${sectionPrefix}_title`)) { return (<></>) }\n\n  const retItems = [];\n  retItems.push(<h2>{t(`${sectionPrefix}_title`)}</h2>);\n\n  let curEntry = 1;\n  while (i18n.exists(`${sectionPrefix}_${curEntry}_title`)) {\n    const curPrefix = `${sectionPrefix}_${curEntry}`;\n\n    if (i18n.exists(`${curPrefix}_title`)) {\n      retItems.push(<h3>{t(`${curPrefix}_title`)}</h3>)\n    }\n    \n    // \n    if (i18n.exists(`${curPrefix}_date`)) {\n      retItems.push(<p><em>{t(`${curPrefix}_date`)}</em></p>);\n    }\n\n    // \n    if (i18n.exists(`${curPrefix}_institution`)) {\n      retItems.push(<p>{t(`${curPrefix}_institution`)}</p>);\n    }\n\n    // \n    if (i18n.exists(`${curPrefix}_location`)) {\n      retItems.push(<p className=\"last\" >{t(`${curPrefix}_location`)}</p>);\n    }\n\n    curEntry += 1;\n  }\n\n  return (retItems);\n}\n\n\nconst CVItemPublicationRef = ({reference}) => {\n\n  // finds sentences between '<' and '>'\n  const splittedRef = reference.split(/(?:<|>)/);\n\n  return ((splittedRef.length !== 3) ?\n          (<>{reference}.</>) :\n          (<>\n             {splittedRef[0]}\n             <strong>{splittedRef[1]}</strong>\n             {splittedRef[2]}.\n           </>));\n}\n\n\nconst CVItemPublicationDOI = ({doi}) => {\n  if (!doi) { return (null); }\n\n  return (\n    <>\n      <span> DOI: </span>\n      <a href={`https://doi.org/${doi}`} target=\"_blank\" rel=\"noreferrer\">{doi}</a>.\n    </>\n  );\n}\n\nconst CVitemPublication = (publication, idx) => {\n  if (!(publication && publication.reference)) {\n    return (null)\n  }\n\n  return (\n    <p className=\"last\" key={idx} >\n      <CVItemPublicationRef reference={publication.reference} />\n      <CVItemPublicationDOI doi={publication.doi} />\n    </p>\n  )\n}\n\nconst CVsectionPublications = ({publications}) => {\n  const { t, i18n } = useTranslation();  // used for showing\n  \n  const sectionName = `cv_publication_title`;\n\n  // basic check\n  if (!(publications && publications.length && i18n.exists(sectionName))) {\n    return (null);\n  }\n\n  return <>\n    { <h2>{t(sectionName)}</h2> }\n    { publications.map(CVitemPublication) }\n  </>\n}\n\n\nexport default function Cv({data}) {\n\n  const { t } = useTranslation();  // used for showing\n \n  return ( \n    <Layout title={t(\"cv\")} >\n      <CVsectionGeneric sectionPrefix=\"experience\" />\n      <CVsectionGeneric sectionPrefix=\"education\" />\n      <CVsectionPublications publications={data.publication.nodes} />\n    </Layout>\n  )\n  \n}\n\n\n// this commands defines how the GraphQL query must be executed\n// must be present is all pages that use i18next\nexport const query = graphql`\n  query ($language: String!) {\n    locales: allLocale(filter: {language: {eq: $language}}) {\n      edges {\n        node {\n          ns\n          data\n          language\n        }\n      }\n    },\n    publication: allCvPublicationsJson {\n        nodes {\n          reference\n          doi\n        }\n    }\n  }\n`;\n"],"names":["CVsectionGeneric","props","t","i18n","useTranslation","sectionPrefix","exists","retItems","push","curEntry","curPrefix","className","CVItemPublicationRef","reference","splittedRef","split","length","CVItemPublicationDOI","doi","href","target","rel","CVitemPublication","publication","idx","key","CVsectionPublications","publications","sectionName","map","Cv","data","title","nodes"],"sourceRoot":""}